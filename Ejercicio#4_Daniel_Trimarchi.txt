
(define (derivada lista) 
  ( cond ( (= (length lista) 2)   (append '(+) (list (car lista)) ))
    
  (else (let ( 
    (x (car lista)) (y  (length lista))  (z (cdr lista)) (sign (if (>= (car lista) 0) '(+) '() )) 
    
    )  (append  sign (list (* x (- y 1))) '(x^) (list (- y 2))  (derivada z)))
  )
))

(define a '(-9 8 -7 6 2))
(define B '(2 -2 5 10))

 (display (derivada a))

 (derivada B)
