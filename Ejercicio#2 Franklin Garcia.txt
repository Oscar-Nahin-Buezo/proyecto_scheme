#|
Implemente una función que reciba una lista de números enteros, y que retorna una
lista de asociación donde la clave es el numero en la lista y el valor es la cantidad de
ocurrencias que tiene en la lista
Por ejemplo
(2,3,1,3,2,2,2,3,4,6,6,6,7,1) -> ((2,4),(3,3),(1,2),(4,1),(6,3),(7,1))

Se puede correr en Rept lit Scheme
|#

(define (contador L)
(if (null? L)
'()
(cons (cons (verificarN (car L)L) (car L))
(contador (deleteN (car L) L)))))
(define (verificarN N L)
(cond ((null? L) 0)
((eq? N (car L)) (+ 1 (verificarN N (cdr L))))
(else (verificarN N (cdr L)))))
(define deleteN
(lambda (item list)
(cond
((null? list) '())
((equal? item (car list)) (deleteN item (cdr list)))
(else (cons (car list) (deleteN item (cdr list)))))))



(contador '(2 3 1 3 2 2 2 3 4 6 6 6 7 1))